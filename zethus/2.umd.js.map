{"version":3,"sources":["webpack:///./node_modules/pcl-decoder/index.js"],"names":["heap","Array","getObject","idx","fill","undefined","push","heap_next","length","takeObject","ret","dropObject","get_memory","get_memory_width","addHeapObject","obj","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","cachegetUint8Memory","getUint8Memory","buffer","Uint8Array","cachegetInt32Memory","getInt32Memory","Int32Array","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","getStringFromWasm","ptr","len","decode","subarray","PCLDecoder","Object","create","prototype","this","__wrap","num_points","point_step","offset_x","offset_y","offset_z","offset_rgb","offset_intensity","use_intensity_channel","use_rainbow","__wbindgen_memory","__wbg_new_59cb74e423758ede","Error","__wbg_stack_558ba5917b466edd","arg0","arg1","ret0","mem","offset","code","charCodeAt","slice","passStringToWasm","stack","ret1","__wbg_error_4bb6c2a97407129a","v0","console","error","__wbindgen_object_drop_ref","__wbindgen_throw"],"mappings":"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","file":"2.umd.js","sourcesContent":["import * as wasm from './index_bg.wasm';\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n* @returns {any}\n*/\nexport function get_memory() {\n    const ret = wasm.get_memory();\n    return takeObject(ret);\n}\n\n/**\n* @returns {number}\n*/\nexport function get_memory_width() {\n    const ret = wasm.get_memory_width();\n    return ret >>> 0;\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction passStringToWasm(arg) {\n\n    let len = arg.length;\n    let ptr = wasm.__wbindgen_malloc(len);\n\n    const mem = getUint8Memory();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = wasm.__wbindgen_realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory = null;\nfunction getInt32Memory() {\n    if (cachegetInt32Memory === null || cachegetInt32Memory.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n/**\n*/\nexport class PCLDecoder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PCLDecoder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_pcldecoder_free(ptr);\n    }\n    /**\n    * @returns {PCLDecoder}\n    */\n    constructor() {\n        const ret = wasm.pcldecoder_new();\n        return PCLDecoder.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    get_copy_memory_ptr() {\n        const ret = wasm.pcldecoder_get_copy_memory_ptr(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    get_position_memory_ptr() {\n        const ret = wasm.pcldecoder_get_position_memory_ptr(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    get_color_memory_ptr() {\n        const ret = wasm.pcldecoder_get_color_memory_ptr(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {number} num_points\n    * @param {number} point_step\n    * @param {number} offset_x\n    * @param {number} offset_y\n    * @param {number} offset_z\n    * @param {number} offset_rgb\n    * @param {number} offset_intensity\n    * @param {boolean} use_intensity_channel\n    * @param {boolean} use_rainbow\n    */\n    compute(num_points, point_step, offset_x, offset_y, offset_z, offset_rgb, offset_intensity, use_intensity_channel, use_rainbow) {\n        wasm.pcldecoder_compute(this.ptr, num_points, point_step, offset_x, offset_y, offset_z, offset_rgb, offset_intensity, use_intensity_channel, use_rainbow);\n    }\n}\n\nexport const __wbindgen_memory = function() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\nexport const __wbg_new_59cb74e423758ede = function() {\n    const ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport const __wbg_stack_558ba5917b466edd = function(arg0, arg1) {\n    const ret = getObject(arg1).stack;\n    const ret0 = passStringToWasm(ret);\n    const ret1 = WASM_VECTOR_LEN;\n    getInt32Memory()[arg0 / 4 + 0] = ret0;\n    getInt32Memory()[arg0 / 4 + 1] = ret1;\n};\n\nexport const __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n    const v0 = getStringFromWasm(arg0, arg1).slice();\n    wasm.__wbindgen_free(arg0, arg1 * 1);\n    console.error(v0);\n};\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm(arg0, arg1));\n};\n\n"],"sourceRoot":""}